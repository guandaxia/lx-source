package tx

import (
	"errors"
	"fmt"
	"lx-source/src/env"
	"net/http"
	"strings"
	"time"

	"github.com/ZxwyWebSite/ztool"
	"github.com/ZxwyWebSite/ztool/logs"
	"github.com/ZxwyWebSite/ztool/x/bytesconv"
)

/*type AutoGenerated struct {
	Code    int    `json:"code"`
	Ts      int64  `json:"ts"`
	StartTs int64  `json:"start_ts"`
	Traceid string `json:"traceid"`
	Req1    struct {
		Code int `json:"code"`
		Data struct {
			Openid             string        `json:"openid"`
			RefreshToken       string        `json:"refresh_token"`
			AccessToken        string        `json:"access_token"`
			ExpiredAt          int           `json:"expired_at"`
			Musicid            int           `json:"musicid"`
			MusicKey           string        `json:"musickey"`
			MusickeyCreateTime int           `json:"musickeyCreateTime"`
			FirstLogin         int           `json:"first_login"`
			ErrMsg             string        `json:"errMsg"`
			SessionKey         string        `json:"sessionKey"`
			Unionid            string        `json:"unionid"`
			StrMusicId         string        `json:"str_musicid"`
			Errtip             string        `json:"errtip"`
			Nick               string        `json:"nick"`
			Logo               string        `json:"logo"`
			FeedbackURL        string        `json:"feedbackURL"`
			EncryptUin         string        `json:"encryptUin"`
			Userip             string        `json:"userip"`
			LastLoginTime      int           `json:"lastLoginTime"`
			KeyExpiresIn       int           `json:"keyExpiresIn"`
			RefreshKey         string        `json:"refresh_key"`
			LoginType          int           `json:"loginType"`
			Prompt2Bind        int           `json:"prompt2bind"`
			LogoffStatus       int           `json:"logoffStatus"`
			OtherAccounts      []interface{} `json:"otherAccounts"`
			OtherPhoneNo       string        `json:"otherPhoneNo"`
			Token              string        `json:"token"`
			IsPrized           int           `json:"isPrized"`
			IsShowDevManage    int           `json:"isShowDevManage"`
			ErrTip2            string        `json:"errTip2"`
			Tip3               string        `json:"tip3"`
			EncryptedPhoneNo   string        `json:"encryptedPhoneNo"`
			PhoneNo            string        `json:"phoneNo"`
		} `json:"data"`
	} `json:"req1"`
}*/

type refreshData struct {
	Req1 struct {
		Code int `json:"code"`
		Data struct {
			ExpiredAt int64 `json:"expired_at"` // 过期时间 (Unix)
			// MusicId      int    `json:"musicid"`      // 数字uid
			MusicKey   string `json:"musickey"`    // 账号Key
			StrMusicId string `json:"str_musicid"` // 字符串uid
			// KeyExpiresIn int    `json:"keyExpiresIn"` // 过期时间 (秒)
		} `json:"data"`
	} `json:"req1"`
}

/*
 刷新登录模块 (移植自Python版)
 逻辑：
  1. 使用内存缓存设置过期时间，每次获取链接时取值检查，若没有设置或已过期则尝试刷新Key
  2. 以计划任务方式运行，每隔一段时间自动执行
 注：
  第一次载入时会刷新一次测试可用性&同步过期时间 (默认7天)
*/

func refresh(loger *logs.Logger, now int64) error {
	// 前置检测
	if now < env.Config.Custom.Tx_Refresh_Interval {
		loger.Debug(`Key未过期，跳过...`)
		return nil
	}
	// 刷新逻辑 (注：QQ登录最常用所以先判断QHL开头)
	var body, surl string
	if strings.HasPrefix(env.Config.Custom.Tx_Ukey, `Q_H_L`) {
		body = ztool.Str_FastConcat(
			`{"req1":{"method":"QQLogin","module":"QQConnectLogin.LoginServer","param":{"expired_in":7776000,"musicid":`,
			env.Config.Custom.Tx_Uuin,
			`,"musickey":"`,
			env.Config.Custom.Tx_Ukey,
			`"}}}`,
		)
		surl = `6`
	} else if strings.HasPrefix(env.Config.Custom.Tx_Ukey, `W_X`) {
		body = ztool.Str_FastConcat(
			`{"comm":{"authst":"","ct":"11","cv":"12080008","fPersonality":"0","qq":"","tmeAppID":"qqmusic","tmeLoginMethod":"1","tmeLoginType":"1","v":"12080008"},"req1":{"method":"Login","module":"music.login.LoginServer","param":{"code":"","loginMode":2,"musickey":"`,
			env.Config.Custom.Tx_Ukey,
			`","openid":"","refresh_key":"","refresh_token":"","str_musicid":"`,
			env.Config.Custom.Tx_Uuin,
			`","unionid":""}}}`,
		)
	} else {
		// 致命错误(删除任务)
		panic(`未知的 qqmusic_key 格式, 请检查配置 [Custom].Tx_Ukey`)
	}
	loger.Debug(`Body: %v`, body)
	var resp refreshData
	signature := sign(bytesconv.StringToBytes(body))
	err := ztool.Net_Request(
		http.MethodPost,
		ztool.Str_FastConcat(`https://u`, surl, `.y.qq.com/cgi-bin/musics.fcg?sign=`, signature),
		strings.NewReader(body),
		[]ztool.Net_ReqHandlerFunc{ztool.Net_ReqAddHeaders(header)},
		[]ztool.Net_ResHandlerFunc{ztool.Net_ResToStruct(&resp)},
	)
	if err != nil {
		// loger.Error(`请求Api失败: %s`, err)
		return errors.New(`请求Api失败: ` + err.Error())
	}
	loger.Debug(`Resp: %+v`, resp)
	if resp.Req1.Code != 0 {
		switch resp.Req1.Code {
		case 1000:
			return fmt.Errorf(`%v: Token无效或已过期`, resp.Req1.Code)
		case 2000:
			return fmt.Errorf(`%v: 该Token不支持刷新`, resp.Req1.Code)
		default:
			return fmt.Errorf(`%v: 刷新登录失败`, resp.Req1.Code)
		}
		// loger.Warn("刷新登录失败, code: %v\n响应体: %+v", resp.Req1.Code, resp)
		// return fmt.Errorf("刷新登录失败, code: %v\n响应体: %+v", resp.Req1.Code, resp)
	}
	loger.Info(`刷新登录成功`)
	env.Config.Custom.Tx_Uuin = resp.Req1.Data.StrMusicId
	env.Config.Custom.Tx_Ukey = resp.Req1.Data.MusicKey
	tnow := time.Now()
	env.Config.Custom.Tx_Refresh_Interval = time.Date(tnow.Year(), tnow.Month(), tnow.Day()+5, 0, 0, 0, 0, tnow.Location()).Unix()
	// env.Config.Custom.Tx_Refresh_Interval = now + 432000 //(每5天刷新一次) //1209600 - 86000 // 14天提前一天
	loger.Debug(`Resp: %+v`, resp)
	loger.Debug(`Uuin: %v, Ukey: %v`, resp.Req1.Data.StrMusicId, resp.Req1.Data.MusicKey)
	loger.Debug(`ExpiresAt: %v, Real: %v`, resp.Req1.Data.ExpiredAt, env.Config.Custom.Tx_Refresh_Interval)
	err = env.Cfg.Save(``)
	// if err != nil {
	// 	loger.Error(`%s`, err)
	// 	return
	// }
	if err == nil {
		loger.Info(`数据更新成功`) // 已通过相应数据更新uin和qqmusic_key
	}
	return err
}

func init() {
	env.Inits.Add(func() {
		if env.Config.Custom.Tx_Refresh_Enable && env.Config.Custom.Tx_Ukey != `` && env.Config.Custom.Tx_Uuin != `` {
			env.Tasker.Add(`tx_refresh`, refresh, 86000, true)
		}
	})
}
